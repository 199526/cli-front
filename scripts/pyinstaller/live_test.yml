name: Pyinstaller Live Test $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    exclude:
    - '*'

jobs:
- job: ExtractMetadata
  displayName: Extract Metadata
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Bash@3
    displayName: 'Extract Version'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/get_version.sh
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: metadata'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: metadata

- job: BuildDebPackages
  displayName: Build Deb Packages
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Bionic:
        deb_system: ubuntu
        distro: bionic
  steps:
  - task: Bash@3
    displayName: 'Build $(deb_system) $(distro) Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: $(distro)
      DISTRO_BASE_IMAGE: $(deb_system):$(distro)
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: $(deb_system)-$(distro)

- job: BuildPyinstallerDebPackages
  displayName: Build Pyinstaller Deb Packages
  dependsOn: ExtractMetadata
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Bionic:
        deb_system: ubuntu
        distro: bionic
  steps:
  - task: Bash@3
    displayName: 'Build Pyinstaller $(deb_system) $(distro) Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/pyinstaller/release/debian/pipeline.sh
    env:
      DISTRO: $(distro)
      DISTRO_BASE_IMAGE: $(deb_system):$(distro)
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pyinstaller Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: pyinstaller-$(deb_system)-$(distro)

- job: PerformanceTest
  displayName: Performance Test
  dependsOn:
   - BuildDebPackages
   - BuildPyinstallerDebPackages
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - task: DownloadPipelineArtifact@1
      displayName: 'Download Build Artifacts'
      inputs:
        TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
        artifactName: metadata
    - task: DownloadPipelineArtifact@1
      displayName: 'Download ubuntu-bionic Build'
      inputs:
        TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
        artifactName: ubuntu-bionic
    - task: DownloadPipelineArtifact@1
      displayName: 'Download pyinstaller-ubuntu-bionic Build'
      inputs:
        TargetPath: '$(Build.ArtifactStagingDirectory)/pyinstaller'
        artifactName: pyinstaller-ubuntu-bionic
    - task: Bash@3
      displayName: 'Test Pyinstaller Package Performance'
      env:
        DISTRO: bionic
        DISTRO_BASE_IMAGE: ubuntu:bionic
        PASSWORD: $(AZURECLITESTPASSWORD)
      inputs:
        targetType: 'inline'
        script: |
          set -exv
          CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
          docker pull ${DISTRO_BASE_IMAGE}
          docker run --rm -e DISTRO=${DISTRO} -e CLI_VERSION=$CLI_VERSION -e PASSWORD=$PASSWORD -v $SYSTEM_ARTIFACTSDIRECTORY/debian:/mnt/artifacts/debian -v $SYSTEM_ARTIFACTSDIRECTORY/pyinstaller:/mnt/artifacts/pyinstaller -v $(pwd):/azure-cli ${DISTRO_BASE_IMAGE} /bin/bash "/azure-cli/scripts/pyinstaller/performance/perf_check.sh"

- job: RunLiveTest
  displayName: Run Live Test
  dependsOn:
   - BuildPyinstallerDebPackages
  timeoutInMinutes: 9999
  strategy:
    maxParallel: 5
    matrix:
      vm:
        Target: vm
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7
    - task: DownloadPipelineArtifact@1
      displayName: 'Download Build Artifacts'
      inputs:
        TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
        artifactName: metadata
    - task: DownloadPipelineArtifact@1
      displayName: 'Download pyinstaller-ubuntu-bionic Build'
      inputs:
        TargetPath: '$(Build.ArtifactStagingDirectory)/pyinstaller'
        artifactName: pyinstaller-ubuntu-bionic
    - task: Bash@3
      displayName: 'Test Pyinstaller ubuntu bionic Package Performance'
      env:
        DISTRO: bionic
        DISTRO_BASE_IMAGE: ubuntu:bionic
        TARGET: $(Target)
        PASSWORD: $(AZURECLITESTPASSWORD)
      inputs:
        targetType: 'inline'
        script: |
          set -exv
          CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
          docker pull ${DISTRO_BASE_IMAGE}
          docker run --rm -e DISTRO=${DISTRO} -e CLI_VERSION=$CLI_VERSION -e PASSWORD=$PASSWORD -e TARGET=$TARGET -v $SYSTEM_ARTIFACTSDIRECTORY/pyinstaller:/mnt/artifacts -v $(pwd):/azure-cli ${DISTRO_BASE_IMAGE} /bin/bash "/azure-cli/scripts/pyinstaller/pyinstaller_package_live_test.sh"

          
